/* ============================================================================================================
   START Quell-Drawing.gbs
   Operations to draw a Quell level on the board. Awareness of Quell-Representation is needed
// REQUIRE: Babel.gbs
// REQUIRE: EnglishPrimitives.gbs
// REQUIRE: Prelude.gbs
// REQUIRE: Quell-Model.gbs
// REQUIRE: Quell-Representation.gbs
   ============================================================================================================
*/

procedure DrawQLevel_(quell) {
  /* OBS: to be used only on the initial drawing */
  ClearBoard()
  DrawTopBar_(quell)
  DrawQBoard_WithSpikesTo_(board(quell), spikesDir(quell))
  DrawQJewel_(jewel(quell))
  DrawQBoxes_(boxes(quell))
  DrawQBall_WithHintMDir_(ball(quell), firstTutorialDHintOn_(quell)) // The first time is accesed directly, without arithmetic operations
}

// ---------
// Drawing operations
// Level 1
// ---------
procedure DrawTopBar_(quell) {
  GoToCorner__(North,West); MarkTopCell_(0)
  Move(East)              ; EncodeTopNum_As_        (numMoves(quell)                  , 1)
  Move(East)              ; EncodeTopNum_As_        (minMoves(quell)                  , 2)
  GoToEdge(East)          ; EncodeTopMDir_As_       (spikesDir(quell)                 , 0)
  Move(West)              ; EncodeTopNum_AndMNum_As_(numPearls(quell), nHintOn_(quell), 4)
  Move(West)              ; EncodeTopJewel_As_      (jewel(quell)                     , 3)  
  Move(West)              ; PadEmptyCellAs_(0)
}

procedure DrawQBoard_WithSpikesTo_(board, spikesDir) { 
  /* PRECOND: the board has at least one qelem */
  GoToCorner__(North, West) Move(South)
  DrawQRow_WithSpikesTo_(head(board), spikesDir)
  foreach row in tail(board) { Move(South); DrawQRow_WithSpikesTo_(row, spikesDir) }
}

procedure DrawQJewel_(jewel) { if (isJewel_(jewel)) { GoToCell_(jpos(jewel)); DrawNum_With_(hits(jewel), attrAColor()) } }
procedure DrawQBoxes_(boxes) { 
  foreach box in boxes { 
    GoToCell_(fst(box))
    DrawBox_(snd(box))
  }
}

procedure DrawMovingQBall_(ball) { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos)
     PRECOND: isMovingBall_(ball) 
  */
  DrawDir_With_(goingTo(ball), ballColor())
  if (beaming(ball)) { Drop__Times(ballColor(), 10) }
}

procedure DrawStaticQBall_(ball) { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos)
     PRECOND: isStaticBall_(ball) 
  */
  Drop__Times(ballColor(), 5)
}

procedure DrawQBall_(ball)   { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos) */
  switch (ball) to {
    QBallAt(pos)               -> { DrawStaticQBall_(ball) }
    QBallTo(pos, dir, beaming) -> { DrawMovingQBall_(ball) }
    NoBall                     -> { }
  }
}  

procedure DrawQBall_WithHintMDir_(ball, mdir)   { 
  switch (ball) to {
    QBallAt(pos)               -> { GoToCell_(pos); DrawStaticQBall_(ball)
                                    DrawMDir_With_(mdir, ballColor())      }
    QBallTo(pos, dir, beaming) -> { GoToCell_(pos); DrawMovingQBall_(ball) }
    NoBall                     -> { }
  }
}

// ---------
// Drawing operations
// Level 2
// ---------
// Top bar operations
procedure MarkTopCell_(i)    { Drop__Times(qelemColor(), 100+i)                            }
procedure PadEmptyCellAs_(i) { while(not isCellAtTopRow()) { MarkTopCell_(i); Move(West) } }
function  isCellAtTopRow()   { return(numStones(qelemColor()) >= 100)                      }

procedure EncodeTopJewel_As_(jewel, i) {
  MarkTopCell_(i)
  DrawBool_With_(False, attrBColor()) // At the beginning the Jewel is not found
}

procedure EncodeTopBool_As_(b , i) { MarkTopCell_(i); DrawBool_With_(b , attrBColor()) }
procedure EncodeTopPos_As_(pos, i) { MarkTopCell_(i); DrawPos_With_(pos, attrAColor()) }
procedure EncodeTopMDir_As_(md, i) { MarkTopCell_(i); DrawMDir_With_(md, attrAColor()) }
procedure EncodeTopNum_As_(n  , i) { MarkTopCell_(i); DrawNum_With_(n  , attrAColor()) }
procedure EncodeTopNum_AndMNum_As_(n, mn, i) { 
  MarkTopCell_(i) 
  DrawNum_With_ (n, attrAColor()) 
  DrawMNum_With_(mn, attrBColor()) 
}

// Board
procedure DrawQRow_WithSpikesTo_(row, spikesDir) {
  /* PRECOND: the row has at least one element */
  GoToEdge(West)
  DrawQElem_WithSpikesTo_(head(row), spikesDir)
  foreach qelem in tail(row) { Move(East); DrawQElem_WithSpikesTo_(qelem, spikesDir) }
}

procedure DrawQElemId_(qelem) { Drop__Times(qelemColor(), codeOfQelem_(qelem)) }
procedure DrawQElem_WithSpikesTo_(qelem, spikesDir) {
  DrawQElemId_(qelem)
  switch (qelem) to {
    Pearl              -> { DrawBool_With_(True               , attrBColor())            }
    Corner(dir)        -> { DrawDir_With_ (dir                , attrAColor())            }
    Angle(dir)         -> { DrawDir_With_ (dir                , attrAColor())            }
    Limit(pointsTo)    -> { DrawDir_With_ (pointsTo           , attrAColor())            }
    Portal(id, target) -> { DrawPos_With_ (target             , attrAColor())            
                            DrawNum_With_ (id                 , attrBColor())            }
    Gate(closed)       -> { DrawBool_With_(closed             , attrBColor()) }
    Spike(dir)         -> { DrawDir_With_(dir                 , attrAColor())            }
    RotableSpike       -> { Assert_OrFail_(not isNothing(spikesDir), msgInvalidQuell()) // spikesDir cannot be Nothing if there are RotableSpikes
                            DrawDir_With_(fromJust(spikesDir) , attrAColor())            } 
    Switch             -> { Assert_OrFail_(not isNothing(spikesDir), msgInvalidQuell()) // spikesDir cannot be Nothing if there are Switches
                            DrawDir_With_(fromJust(spikesDir) , attrAColor())            } 
    _                  -> { }
    }
}

procedure DrawBox_(gender) {
  code := codeOfGender_(gender)
  DrawNum_With_(10*gender, attrBColor())
}

procedure DrawBeamingBox_(gender) {
  code := codeOfGender_(gender)
  DrawNum_With_(10*gender+10, attrBColor()) // Beaming is indicated with 10 more stones
}

// ---------
// Clearing operations
// ---------
procedure ClearBox() {
  /* PRECOND: there is a Box represented in the current cell */
  boxCode := truncate_ToMultipleOf_(currentNumWith_(attrBColor()), 10)
  Grab__Times(attrBColor(), boxCode)
}

procedure ClearAttrA()        { GrabAll_(attrAColor()) }
  
procedure ClearBall()         { GrabAll_(ballColor())  }
procedure ClearPearl()        { GrabAll_(attrBColor()) }
procedure ClearJewel()        { GrabAll_(attrBColor()) }
  
procedure ClearTopNumPearls() { GrabAll_(attrAColor()) }
procedure ClearTopNumMoves()  { GrabAll_(attrAColor()) }
procedure ClearTopHint()      { GrabAll_(attrBColor()) }
procedure ClearTopSpikesDir() { GrabAll_(attrAColor()) }

// ---------
// Error messages
// ---------
function msgInvalidQuell() { 
  return(babel("Quell representation is invalid"
              ,"La representación de Quell es inválida"))
}

/* ============================================================================================================
   END Quell-Drawing.gbs
   ============================================================================================================
*/
