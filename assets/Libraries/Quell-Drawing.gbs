/* ============================================================================================================
   START Quell-Drawing.gbs
   Operations to draw a Quell level on the board. Awareness of Quell-Representation is needed
// REQUIRE: Babel.gbs
// REQUIRE: EnglishPrimitives.gbs
// REQUIRE: Prelude.gbs
// REQUIRE: Quell-Model.gbs
// REQUIRE: Quell-Representation.gbs
   ============================================================================================================
*/

procedure DrawQLevel_(quell) {
  /* OBS: to be used only on the initial drawing */
  ClearBoard()
  DrawTopBar_(quell)
  DrawQBoard_WithSpikesTo_(board(quell), spikesDir(quell))
  DrawQJewel_(jewel(quell))
  DrawQBoxes_(boxes(quell))
  DrawQBall_WithDHint_(ball(quell), firstTutorialDHintOn_(quell)) // The first time, hint is accesed directly (without arithmetic operations)
}

procedure SetTopShowHint() {
  /* PRECOND: TopShowHint is false */
  GoToTopShowHint()
  DrawBool_With_(True, attrBColor())
}

procedure SetTopJewelFound() {
  pos := currentPos()
  GoToTopJewel()
  DrawBool_With_(True, attrBColor())
  GoToCell_(pos)
}

procedure IncrementTopNumMoves() {
  pos := currentPos()
  GoToTopNumMoves()
  numMoves := currentNumWith_(attrAColor())
  ClearTopNumMoves()
  DrawNum_With_(numMoves+1, attrAColor())
  GoToCell_(pos)
}

procedure DecrementTopNumPearls() {
  pos := currentPos()
  GoToTopNumPearls()
  numPearls := currentNumWith_(attrAColor())
  ClearTopNumPearls()
  DrawNum_With_(numPearls-1, attrAColor())
  GoToCell_(pos)
}

procedure SetTopHintTo_(mdir) {
  pos := currentPos()
  GoToTopHint()
  ClearTopHint()
  DrawMNum_With_(mdir, attrBColor())
  GoToCell_(pos)
}

procedure SetTopSpikesDirTo_(dir) {
  pos := currentPos()
  GoToTopSpikesDir()
  ClearTopSpikesDirDirection()
  DrawMDir_With_(just(dir), attrAColor())
  GoToCell_(pos)
}

// ---------
// Drawing operations
// Level 1
// ---------
procedure DrawTopBar_(quell) {
  GoToCorner__(North,West); EncodeTopShowHint_As_(isTutorial_(quell)                  , 1) // At the beginning, Tutorial levels start with hints on
                            if (isUnderConstruction_(quell)) { ClearTopID() }
  Move(East)              ; EncodeTopNum_As_        (numMoves(quell)                  , 2)
  Move(East)              ; EncodeTopNum_As_        (minMoves(quell)                  , 3)
  Move(East)
  GoToEdge(East)          ; EncodeTopMDir_As_(spikesDir(quell)                        , 6) // codeOfTopSpikesDir()-100
                            if (isUnderConstruction_(quell)) { ClearTopID() }
  Move(West)              ; EncodeTopNum_AndMNum_As_(numPearls(quell), nHintOn_(quell), 5)
  Move(West)              ; EncodeTopJewel_As_      (jewel(quell)                     , 4)  
  Move(West)              ; PadEmptyCellAs_(0)
  GoToEdge(West)
  Move(South)
}

procedure DrawQBoard_WithSpikesTo_(board, spikesDir) { 
  /* PRECOND: the board has at least one qelem */
  GoToCorner__(North, West) Move(South)
  DrawQRow_WithSpikesTo_(head(board), spikesDir)
  foreach row in tail(board) { Move(South); DrawQRow_WithSpikesTo_(row, spikesDir) }
}

procedure DrawQJewel_(jewel) { 
  if (isJewel_(jewel)) { 
    GoToCell_(jpos(jewel))
    if (hasWall()) { DrawJewelIntoWall() } 
    else           { DrawJewelAlone()    } 
  } 
}

procedure ClearJewelHits()         { ClearAttrA()                      } /* PRECOND: there is a Jewel coded here */
procedure DrawJewelWith_Hits(hits) { DrawNum_With_(hits, attrAColor()) }
procedure DrawJewelAlone()         { DrawJewelWith_Hits(1)             }
procedure DrawJewelIntoWall()      { 
    DrawBool_With_(True, attrBColor())
    DrawJewelWith_Hits(4) 
}


procedure DrawQBoxes_(boxes) { 
  foreach box in boxes { 
    GoToCell_(fst(box))
    DrawBox_(snd(box))
  }
}

procedure DrawMovingQBall_(ball) { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos)
     PRECOND: isMovingBall_(ball) 
  */
  DrawDir_With_(goingTo(ball), ballColor())
  if (beaming(ball)) { Drop__Times(ballColor(), 10) }
}

procedure DrawStaticQBall() { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos)
     PRECOND: isStaticBall_(ball) 
  */
  Drop__Times(ballColor(), 5)
}

procedure DrawQBall_(ball)   { 
  /* PURPOSE: draw the ball in the current cell (ignoring bpos) */
  switch (ball) to {
    QBallAt(pos)               -> { DrawStaticQBall()      }
    QBallTo(pos, dir, beaming) -> { DrawMovingQBall_(ball) }
    NoBall                     -> { }
  }
}  

procedure DrawQBall_WithDHint_(ball, mdir)   { 
  switch (ball) to {
    QBallAt(pos)               -> { GoToCell_(pos); DrawStaticQBall()
                                    DrawMDir_With_(mdir, ballColor())      }
    QBallTo(pos, dir, beaming) -> { GoToCell_(pos); DrawMovingQBall_(ball) }
    NoBall                     -> { GoToCorner__(North, West); Move(South) }
  }
}

// ---------
// Drawing operations
// Level 2
// ---------
// Top bar operations
procedure MarkTopCell_(i)     { Drop__Times(qelemColor(), 100+i)                            }
procedure PadEmptyCellAs_(i)  { while(not isCellAtTopRow()) { MarkTopCell_(i); Move(West) } }
function  isCellAtTopRow()    { return(numStones(qelemColor()) >= 100)                      }

procedure EncodeTopShowHint_As_(showHint, i) {
  MarkTopCell_(i)
  DrawBool_With_(showHint, attrBColor()) // At the beginning Tutorial levels start with hints on
}


procedure EncodeTopJewel_As_(jewel, i) {
  MarkTopCell_(i)
  DrawBool_With_(isJewel_(jewel), attrAColor())
  DrawBool_With_(isFound_(jewel), attrBColor()) 
}

procedure EncodeTopBool_As_(b , i) { MarkTopCell_(i); DrawBool_With_(b , attrBColor()) }
procedure EncodeTopPos_As_(pos, i) { MarkTopCell_(i); DrawPos_With_(pos, attrAColor()) }
procedure EncodeTopMDir_As_(md, i) { MarkTopCell_(i); DrawMDir_With_(md, attrAColor()) }
procedure EncodeTopNum_As_(n  , i) { MarkTopCell_(i); DrawNum_With_(n  , attrAColor()) }
procedure EncodeTopNum_AndMNum_As_(n, mn, i) { 
  MarkTopCell_(i) 
  DrawNum_With_ (n, attrAColor()) 
  DrawMNum_With_(mn, attrBColor()) 
}

// Board
procedure DrawQRow_WithSpikesTo_(row, spikesDir) {
  /* PRECOND: the row has at least one element */
  GoToEdge(West)
  DrawQElem_WithSpikesTo_(head(row), spikesDir)
  foreach qelem in tail(row) { Move(East); DrawQElem_WithSpikesTo_(qelem, spikesDir) }
}

procedure DrawQElemID_(qelemID) { Drop__Times(qelemColor(), qelemID) }
procedure DrawQElemIDOf_(qelem) { DrawQElemID_(codeOfQelem_(qelem))  }
procedure DrawQElem_WithSpikesTo_(qelem, spikesDir) {
  switch (qelem) to {
    Pearl              -> { DrawPearl()                     }
    Corner(dir)        -> { DrawCornerTo_(dir)              }
    Angle(dir)         -> { DrawAngleTo_(dir)               }
    Limit(pointsTo)    -> { DrawLimitTo_(pointsTo)          }
    Portal(id, target) -> { DrawPortal_Base(id)
                            DrawPortalPos_(target)          }
    Gate(closed)       -> { DrawGate_(closed)               }
    Spike(dir)         -> { DrawSpikeTo_(dir)               }
    RotableSpike       -> { Assert_OrFail_(not isNothing(spikesDir), msgInvalidQuell()) // spikesDir cannot be Nothing if there are RotableSpikes
                            DrawRotableSpikeTo_(spikesDir) } 
    Switch             -> { Assert_OrFail_(not isNothing(spikesDir), msgInvalidQuell()) // spikesDir cannot be Nothing if there are Switches
                            DrawSwitchTo_(spikesDir)        } 
    _                  -> { DrawQElemIDOf_(qelem)           }
    }
}

procedure DrawBound()               { DrawQElemID_(codeOfCorner())                                       }
procedure DrawCornerTo_(dir)        { DrawQElemID_(codeOfCorner())      ; CompleteQElemWithDir_(dir)     }
procedure DrawAngleTo_(dir)         { DrawQElemID_(codeOfAngle())       ; CompleteQElemWithDir_(dir)     }
procedure DrawLimitTo_(dir)         { DrawQElemID_(codeOfLimit())       ; CompleteQElemWithDir_(dir)     }

procedure DrawPearl()               { DrawQElemID_(codeOfPearl())       ; CompleteQElemWithBool_(True)   }
procedure DrawGate_(closed)         { DrawQElemID_(codeOfGate())        ; CompleteQElemWithBool_(closed) }
procedure DrawSpikeTo_(dir)         { DrawQElemID_(codeOfSpike())       ; CompleteQElemWithDir_(dir)     }
procedure DrawMultispike()          { DrawQElemID_(codeOfMultispike())                                   }
procedure DrawRotableSpikeTo_(mdir) { DrawQElemID_(codeOfRotableSpike()); CompleteRotableMDir_(mdir)     }
procedure DrawSwitchTo_(mdir)       { DrawQElemID_(codeOfSwitch())      ; CompleteRotableMDir_(mdir)     }
procedure DrawWall()                { DrawQElemID_(codeOfWall())                                         }
procedure DrawOut()                 { DrawQElemID_(codeOfOut())                                          }

procedure DrawOpenGate()          { DrawGate_(False)                                           }
procedure DrawWallOverJewel()     { DrawWall(); ClearJewel(); DrawJewelIntoWall()              }
procedure DrawBox_(gender)        { DrawNum_With_(100*codeOfGender_(gender), attrBColor())     }
procedure DrawBeamingBox_(gender) { DrawNum_With_(100*codeOfGender_(gender)+10, attrBColor())  } /* Beaming is indicated with 10 addtional stones */

procedure CompleteRotableMDir_(mdir)   { DrawDir_With_(valueOf_Or_(mdir, North), attrAColor()) } /* PRECOND: current cell has a Switch or RotableSpike ID encoded */
procedure CompleteQElemWithDir_(dir)   { DrawDir_With_(dir, attrAColor())                      } /* PRECOND: current cell has a Spike, TopSpikesDir, Corner, Angle, or Limit ID encoded */
procedure CompleteQElemWithBool_(cond) { DrawBool_With_(cond, attrBColor())                    } /* PRECOND: current cell has a Pearl or Gate ID encoded */

procedure DrawTopSpikesTempPos_(pos)   { DrawPos_With_(pos, attrBColor())                      }

procedure DrawPortal_Base(id)          { DrawQElemID_(codeOfPortal()) 
                                         DrawNum_With_(id, attrBColor())                       }
procedure DrawPortalPos_(pos)          { DrawPos_With_(pos, attrAColor())                      }

// ---------
// Clearing operations
// ---------
procedure ClearBox() {
  /* PRECOND: there is a Box represented in the current cell */
  boxCode := truncate_ToMultipleOf_(currentNumWith_(attrBColor()), 10)
  Grab__Times(attrBColor(), boxCode)
}

procedure ClearAttrA()                 { GrabAll_(attrAColor()) }
procedure ClearAttrB()                 { GrabAll_(attrBColor()) }
procedure ClearQElemID()               { GrabAll_(qelemColor()) }
           
procedure ClearBall()                  { GrabAll_(ballColor())  }
procedure ClearPearl()                 { ClearAttrB()           }
procedure ClearJewel()                 { ClearAttrA()           }
procedure ClearPortalTarget()          { ClearAttrA()           }

procedure ClearTopShowHint()           { ClearAttrB()           }
procedure ClearTopNumPearls()          { ClearAttrA()           }
procedure ClearTopNumMoves()           { ClearAttrA()           }
procedure ClearTopHint()               { ClearAttrB()           }
procedure ClearTopSpikesDirDirection() { ClearAttrA()           }
procedure ClearTopSpikesDirTempPos()   { ClearAttrB()           }
procedure ClearTopID()                 { ClearQElemID()
                                         MarkTopCell_(0)        }

// ---------
// Error messages
// ---------
function msgInvalidQuell() { 
  return(babel("Quell representation is invalid"
              ,"La representación de Quell es inválida"))
}

/* ============================================================================================================
   END Quell-Drawing.gbs
   ============================================================================================================
*/
