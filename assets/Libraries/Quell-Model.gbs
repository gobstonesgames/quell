/* ============================================================================================================
   START Quell-Model.gbs
   Definition of the datatypes representing a Quell level.
   
   It is assumed that there is a single function level() that encodes the initial state of the level.
   All the static information is obtained from it (particularly, isTutorial, solution, and minMoves).

// REQUIRE: Babel.gbs
// REQUIRE: EnglishPrimitives.gbs
// REQUIRE: Prelude.gbs
   ============================================================================================================
*/

type QuellLevel is record {
  /* INV.REP.:
   * board represent the Quell game-board
     - all elements of the game-board are borders of the same length
     - boarders (Limits and Angles) and Corners form a continuous "line"
     - all rows or columns that have some element different from Out or a limit have at least a two paired borders (Limits or Angles pointing to each other) 
     - all elements different from Out or boarders or Corner are between paired borders
     - no Out or border or Corner elements are between paired borders
     - for each Portal on the board, its target is a valid pos with the only other Portal with matching id on the board
   * solution is a list of Dirs of length minMoves that solves the level
   * minMoves is the minimum number of moves required to solve the level using Quell rules (0 if not solvable)
   * if the jewel field jpos exists, then it indicates a valid position in the board, and the QElem in that position is either Wall or Empty
   * either there is some RotableSpikes, at least a Switch, and spikesDir is different from Nothing, 
     or there is no RotableSpikes, no Switches, and spikesDir is Nothing
   * all pos values in boxes are valid positions in the board, and the QElement in that position is Empty
   * if the ball field bpos exists, then it indicates a valid position in the board, and the QElem in that position is either Empty, or an open Gate, or a Portal, or a Switch
   * if rightMoves is not Nothing, the number is positive and less than minMoves
   */
   field isTutorial    // Bool
   field board         // [[QElem]] 
   field solution      // [Dir]
   field minMoves      // Number
   field jewel         // QJewel
   field spikesDir     // Maybe(Direction)
   field boxes         // [(Pos, Gender)]
   field ball          // QBall
   field numMoves      // Number
   field rightMoves    // Maybe(Number)
   field numPearls     // Number
}

type QElem is variant {
   case Empty        {}
   case Pearl        {}
   case Wall         {}
   case Corner       { field dir }        // Dir
   case Angle        { field dir }        // Dir
   case Limit        { field pointsTo }   // Dir
   case Portal       { field id           // Number (less than 10)
                       field target       // Pos
                     }
   case Gate         { field closed }     // Bool
   case Spike        { field pointsTo }   // Dir
   case Multispike   {}
   case RotableSpike {}
   case Switch       {} 
   case Out          {}
}

type QJewel is variant {
   case NoJewel {}
   case QJewel  { field jpos // Pos
                  field hits // Number (usually 4 if Wall, and 1 if visible)
                }
}

type QBall is variant {
   case NoBall  {}
   case QBallAt { field bpos }  // Pos
   case QBallTo { field bpos    // Pos
                  field goingTo // Dir 
                  field beaming // Bool
                }
}

type QToken is variant {
  case ABox    {}
  case APearl  {}
  case AJewel  {}
  case ABall   {}
  case NoToken {}
}

// ---------------------------
//  Abbreviations
// ---------------------------
function cNW() { return(Corner(dir <- East))      }
function cNE() { return(Corner(dir <- South))     }
function cSE() { return(Corner(dir <- West))      }
function cSW() { return(Corner(dir <- North))     }
   
function aNW() { return(Angle(dir <- East))       }
function aNE() { return(Angle(dir <- South))      }
function aSE() { return(Angle(dir <- West))       }
function aSW() { return(Angle(dir <- North))      }

function hT()  { return(Limit(pointsTo <- South)) }
function hB()  { return(Limit(pointsTo <- North)) }
function vL()  { return(Limit(pointsTo <- East))  }
function vR()  { return(Limit(pointsTo <- West))  }

// ---------------------------
//  Detection functions
// ---------------------------
function isEmpty_(qelem)        { return(matching (qelem)  select True  on Empty        False otherwise) }
function isPearl_(qelem)        { return(matching (qelem)  select True  on Pearl        False otherwise) }
function isWall_(qelem)         { return(matching (qelem)  select True  on Wall         False otherwise) }
function isCorner_(qelem)       { return(matching (qelem)  select True  on Corner       False otherwise) }
function isAngle_(qelem)        { return(matching (qelem)  select True  on Angle        False otherwise) }
function isLimit_(qelem)        { return(matching (qelem)  select True  on Limit        False otherwise) }
function isPortal_(qelem)       { return(matching (qelem)  select True  on Portal       False otherwise) }
function isGate_(qelem)         { return(matching (qelem)  select True  on Gate         False otherwise) }
function isSpike_(qelem)        { return(matching (qelem)  select True  on Spike        False otherwise) }
function isMultispike_(qelem)   { return(matching (qelem)  select True  on Multispike   False otherwise) }
function isRotableSpike_(qelem) { return(matching (qelem)  select True  on RotableSpike False otherwise) }
function isSwitch_(qelem)       { return(matching (qelem)  select True  on Switch       False otherwise) }
function isOut_(qelem)          { return(matching (qelem)  select True  on Out          False otherwise) }

function isOpen_(qelem) {
  return(matching (qelem)  select True              on Empty
                                  True              on Portal
                                  True              on Switch
                                  not closed(qelem) on Gate
                                  False             otherwise)
} 

function isSpiky_ComingFrom_WithRotablesTo_(qelem, dir, rmdir) {
  return (matching (qelem) select True on Multispike
                                  dir==opposite(pointsTo(qelem)) on Spike
                                  dir==opposite(fromJust(rmdir)) on RotableSpike
                                  False                          otherwise)
}

// --------------------------- 
function isNoJewel_(jewel)      { return(matching (jewel)  select True             on NoJewel False otherwise) }
function isJewel_(jewel)        { return(matching (jewel)  select True             on QJewel  False otherwise) }

function isFound_(jewel)        { return(matching (jewel)  select (hits(jewel)==0) on QJewel  False otherwise) }

// ---------------------------      
function isNoBall_(qball)       { return(matching (qball)  select True  on NoBall            False otherwise) }
function isBall_(qball)         { return(matching (qball)  select False on NoBall            True  otherwise) }
function isStaticBall_(qball)   { return(matching (qball)  select True  on QBallAt           False otherwise) }
function isMovingBall_(qball)   { return(matching (qball)  select True  on QBallTo           False otherwise) }
function isBeamingBall_(qball)  { return(matching (qball)  select beaming(qball) on QBallTo  False otherwise)}

// ---------------------------
function isNoToken_(qtoken)     { return(matching (qtoken) select True  on NoToken           False  otherwise) }
function isToken_(qtoken)       { return(matching (qtoken) select False on NoToken           True  otherwise) }
function isABox_(qtoken)        { return(matching (qtoken) select True  on ABox              False otherwise) }
function isAPearl_(qtoken)      { return(matching (qtoken) select True  on APearl            False otherwise) }
function isAJewel_(qtoken)      { return(matching (qtoken) select True  on AJewel            False otherwise) }

// ---------------------------
//  Ball modification
// ---------------------------
function movedBall_To_(qball,dir) { return(QBallTo(bpos    <- bpos(qball)
                                                  ,goingTo <- dir
                                                  ,beaming <- False))                            } /* PRECOND: isBall_(qball)       */
function stoppedBall_(qball)      { return(QBallAt(bpos <- bpos(qball)))                         } /* PRECOND: isBall_(qball)       */
function bouncedBall_(qball)      { return(QBallTo(qball | goingTo <- opposite(goingTo(qball)))) } /* PRECOND: isMovingBall_(qball) */
function beamedBall_(qball)       { return(QBallTo(qball | beaming <- False))                    } /* PRECOND: isMovingBall_(qball) */
function beamingBall_(qball)      { return(QBallTo(qball | beaming <- True))                     } /* PRECOND: isMovingBall_(qball) */

// ---------------------------
//  Jewel information on Quell
// ---------------------------
function hasJewel_(quell)      { return(not isNoJewel_(jewel(quell))) }
function jewelPosOn_(quell)    { return(jpos(jewel(quell)))           } /* PRECOND: * hasJewel_(quell) */     

// ---------------------------
//  Ball information on Quell
// ---------------------------
function hasBall_(quell)       { return(not isNoBall_(ball(quell))) }
function hasMovingBall_(quell) { return(isMovingBall_(ball(quell))) }
function ballPosOn_(quell)     { return(bpos(ball(quell)))          } /* PRECOND: * hasBall_(quell) */     
function ballDirOn_(quell)     { return(goingTo(ball(quel)))        } /* PRECOND: hasMovingBall_(quell) */ 
function ballBeamingOn_(quell) { return(beaming(ball(quel)))        } /* PRECOND: hasMovingBall_(quell) */ 

// ---------------------------
//  Hint information on Quell
// ---------------------------
function firstTutorialDHintOn_(quell) {
  return(choose just(head(solution(quell))) when (isTutorial(quell))
                Nothing otherwise)
}

function dHintOn_(quell) {
  return(choose just(elemAtIndex_In_(fromJust(rightMoves(quell))
                                    ,solution(quell)))           when (not isNothing(rightMoves(quell)))
                Nothing                                          otherwise)
}

function nHintOn_(quell) {
  return(choose just(minMoves(quell)-fromJust(rightMoves(quell))) when (not isNothing(rightMoves(quell)))
                Nothing                                           otherwise)
}

function dHintForNHint_On_(mi, quell) { 
  return(choose just(elemAtIndex_In_(minMoves(quell)-fromJust(mi)
                                    ,solution(quell)))            when (not isNothing(mi) && mi/=just(0))
                Nothing                                           otherwise)
}

/* ============================================================================================================
   END Quell-Model.gbs
   ============================================================================================================
*/
