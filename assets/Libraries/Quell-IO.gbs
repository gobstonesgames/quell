/* ============================================================================================================
   START Quell-IO.gbs
   Operations to draw and read a Quell level from the board
// REQUIRE: Babel.gbs
// REQUIRE: Prelude.gbs
// REQUIRE: QuellRepresentation.gbs
   ============================================================================================================
   TO-DO: Add a top bar to the board representation (in order to add the solution, the numMoves, and represent spikesDir in a better way)
*/

// ---------
// Quell I/O operations
// ---------
function currentQuell() {
  /* PRECOND: * there is a quell level represented in the Gobstones board */
  return (currentQLevel())
}

procedure WriteQuell_(quell) {
  /* PRECOND: * Gobstones board is big enough to represent the quell board */
  DrawQLevel_(quell)
}

// ---------
// Representation
// ---------
/*
  The ball is represented with ballColor() stones (standard representation for MDir:, 1 to 5 stones:
    + moving North, 1 or 6 stones
    + moving East,  2 or 7 stones
    + moving South, 3 or 8 stones
    + moving West,  4 or 9 stones
    + not moving,   5 stones)
     
   QElements are represented with qelemColor() stones, and their attributes with attrAColor() and attrBColor() stones, depending of the case.
    + Empty, no qelem stones
    + Pearl,      1 stone
    + Wall,       2 stones
    + Box,        3 stones
    + Limit,      4 stones
                     * isCorner, attrA stones (1-4 for corners, 5-8 for angles)
                     * pointsTo, attrB stones 
    + Portal, 5 stones
                     * doorA,    attrA stones
                     * doorB,    attrB stones
    + Multispike, 6 stones
    + Spike,      7 stones
                     * rotable,  attrA stones 
    + Switch,     8 stones
    + Gate,       9 stones
                     * open,     attrA stones
    + Out,       10 stones (or 110 for special case)
  
  QLevel info is represented at top row with 10x qelem stones (x the col Number) -- TO BE DONE
    * cell  0 at column 0 encode spikesDir in attrA stones
    * cell  1 at column 1 encode numMoves in attrA stones (100 for overload)
    * cell  2 at column 2 encode minMoves in attrA stones (100 for overload)
    * cell  0 at column 3 encode jewel position in attrAStones
    * cells 3 (or 0 if not used) from column 4 to 3-from-East encode solution in attrA and attrB stones 
           ([Dir] is encoded as a 0-less number in base 4, represented in base 100 in low first pairs of digits in order AB)
    * cell  4 at column 2 from East encode if jewel was found in attrB stones
    * cell  5 at column 1 from East encode numPearls in attrA stones
    * cell  0 at East edge with no extra information

  The jewel is represented on its position if it was not found, using
    + hitsReceived, attrA stones
*/

// ---------
// Reading operations
// OBS: All operations has as PRECOND:
//        * there is a quell level represented in the Gobstones board 
// ---------
function currentQLevel() {
  let (curSpikesDir, curNumMoves, curMinMoves
      ,curJewelPos, curJewelFound, curSolution
      ,curNumPearls)                         := currentQInfo()
  let (curBoard, checkNumPearls)             := currentQBoard()
  let (curBallMPos, curBallMDir)             := currentQBallInfo()
  curJewelInfo                               := currentQJewel(curJewelFound, curJewelPos)
  Assert_OrFail_(curNumPearls==checkNumPearls, msgInvalidQuell())
  return (QuellLevel(board     <- curBoard
                   , spikesDir <- curSpikesDir
                   , jewel     <- curJewelInfo
                   , ball      <- curBallMPos
                   , inTransit <- curBallMDir
                   , numPearls <- curNumPearls
                   , solution  <- curSolution
                   , minMoves  <- curMinMoves
                   , numMoves  <- curNumMoves))
}

// Level 1
function currentQInfo() {
  GoToTopRow()
  Assert_OrFail_(isCellAtTopRow(), msgNoQuellLevel())
  curSpikesDir  := currentMDirWith_(attrAColor())  Move(East)
  curNumMoves   := currentNumWith_(attrAColor())   Move(East)
  curMinMoves   := currentNumWith_(attrAColor())   Move(East)
  curJewelPos   := currentPosWith_(attrAColor())   Move(East)
  curSolution   := currentDirsWith_And_(attrAColor(), attrBColor())
  GoToEdge(East)                                   Move(West)
  curNumPearls  := currentNumWith_(attrAColor())   Move(West)
  curJewelFound := currentBoolWith_(attrBColor())
  return (curSpikesDir, curNumMoves, just(curMinMoves), curJewelPos, curJewelFound, curSolution, curNumPearls)
}

function currentQBoard() {
  GoToCorner__(South,East)
  curBoard     := [ ]
  curNumPearls := 0
  while (not atTopRow()) {
    let (row, numPearls) := currentRowInfo()
    curBoard     := curBoard ++ [ row ]
    curNumPearls := curNumPearls + numPearls
    Move(North)
  } 
  return(curBoard, curNumPearls)
}

function currentQBallInfo() {
  GoToBall()
  NormalizeBallIfNeeded()
  return(choose (just(currentPos()), currentMDirWith_(ballColor())) when (hasBall())
                (Nothing           , Nothing)                       otherwise)
}

function currentQJewel(found, jpos) {
  /* PRECOND: * there is a jewel represented in the board */
  GoToCell_(jpos)
  return(QJewel(found        <- found
              , jpos         <- jpos
              , hitsReceived <- numStones(attrAColor())-1))
}

// Level 2
procedure GoToBall() {
  StartBoardTraverseTo_And_(East, North)
  while(not atEndOfBoardTraverseTo_And_(East, North) 
     && not hasBall()) {
    GoToNextCellInBoardTraverseTo_And_(East, North) 
  }
}

procedure NormalizeBallIfNeeded() {
  if (ballIndicatesDirectionVisually()) { RemoveBallVisualIndication() }
}

function currentRowInfo() {
  GoToEdge(West)
  qelem := currentQElem()
  curRow       := [ qelem ]
  curNumPearls := delta(isPearl_(qelem))
  while (canMove(East)) {
     Move(East)
     qelem := currentQElem()
     curRow       := curRow ++ [ qelem ]
     curNumPearls := curNumPearls + delta(isPearl_(qelem))
  }
  return (curRow, curNumPearls)
}

function currentQElem() {
  /* PRECOND: * there is a qelem represented in the current cell */
  
  return(matching (numStones(qelemColor())) select
          Empty                 on 0
          Pearl                 on 1
          Wall                  on 2
          currentBox()          on 3
          currentLimit()        on 4
          currentPortal()       on 5
          Multispike            on 6
          currentSpike()        on 7
          currentSwitch()       on 8
          currentGate()         on 9
          Out                   on 10
          boom(msgNoQElement()) otherwise)
}

function currentBox() {
  /* PRECOND: * there is a box represented in the current cell */
  return(Box(gender <- currentGenderWith_(attrAColor())))
}

function currentLimit() {
  /* PRECOND: * there is a limit represented in the current cell */
  return(Limit(corner   <- currentCornerWith_(attrAColor())
             , pointsTo <- currentMDirWith_(attrBColor())))
}

function currentPortal() {
  /* PRECOND: * there is a portal represented in the current cell */
  return(Portal(doorA <- currentPosWith_(attrAColor())
              , doorB <- currentPosWith_(attrBColor())))
}

function currentSpike() {
  /* PRECOND: * there is a spike represented in the current cell */
  return(Spike(notRotable <- currentMDirWith_(attrAColor())))
}

function currentSwitch() {
  /* PRECOND: * there is a switch represented in the current cell */
  return(Switch)
}

function currentGate() {
  /* PRECOND: * there is a gate represented in the current cell */
  return(Gate(open <- currentBoolWith_(attrAColor())))
}

function currentCornerWith_(color) { 
  code := numStones(color)
  if (num_IsBetween_And_(code, 1, 4)) 
    { d1 := decodedDir_(code) 
      d2 := nextDir(d1)   
  } elseif (num_IsBetween_And_(code, 5, 8)) 
    { d1 := decodedDir_(code-4)
      d2 := prevDir(d1)   
  } else { }                                      
  return(choose just((d1,d2)) when (num_IsBetween_And_(code, 1, 8))
                Nothing       otherwise)
}

function currentDirsWith_And_(colorA, colorB) {
  code := currentCodeInBase_With_And_(100, colorA, colorB)
  return(decodedDirs_(code))
}

function currentCodeInBase_With_And_(base, colorA, colorB) {
  currentColor := colorA
  currentCode  := 0
  currentPow   := 1
  while (hasStones(colorA)) {
    currentDigit := currentNumWith_(currentColor)
    currentCode  := currentCode + currentDigit * currentPow
    currentPow   := currentPow * base
    if (currentColor == colorA) { currentColor := colorB            } 
     else                       { currentColor := colorA Move(East) }
  }
  return(currentCode)
}

function hasBall()   { return(num_IsBetween_And_(numStones(ballColor()), 1, 9))     }
function hasQJewel() { return((hasWall() || hasEmpty()) && hasStones(attrAColor())) }
function hasWall()   { return(numStones(qelemColor())==2)                           }
function hasEmpty()  { return(numStones(qelemColor())==0)                           }

// ---------
// Tutorial operations
// ---------
procedure MarkAsTutorial() {
  ClearBoard()
  GoToCorner__(South, West)
  Drop(attrBColor())
}

function isTutorialLevel() {
  GoToCorner__(South, West)
  return(hasStones(attrBColor()))
}

procedure AddBallVisualIndicationOn_(quell) {
  if (hasQBall_(quell) && not hasMovingQBall_(quell) && not isEmpty(solution(quell)) ) {
    GoToCell_(ballPosOn_(quell))
    AddBallVisualIndicationTo_(head(solution(quell)))
  }
}

function  ballIndicatesDirectionVisually() { return(num_IsBetween_And_(numStones(ballColor()), 6, 9)) }
procedure RemoveBallVisualIndication() { 
  /* PRECOND: there is a ball with visual indication (there are between 6 and 9 stones) in the current cell */
  Grab__Times(ballColor(), numStones(ballColor())-5) 
}
procedure AddBallVisualIndicationTo_(dir) { 
  /* PRECOND: there is a ball that is not moving and without visual indication (there are 5 stones) in the current cell */
  Drop__Times(ballColor(), codeOfDir_(dir)) 
}

// ---------
// Drawing operations
// ---------
procedure DrawQLevel_(quell) {
  DrawQBoard_WithSpikesTo_(board(quell), spikesDir(quell))
  DrawQInfo_(quell)
  DrawQJewel_(jewel(quell))
  DrawQBall_To_(ball(quell), inTransit(quell))
}

// Level 1
procedure DrawQInfo_(quell) {
  GoToEdge(West)  EncodeTopMDir_At_(spikesDir(quell), 0)
  Move(East)      EncodeTopNum_At_(numMoves(quell),1)
  Move(East)      EncodeTopNum_At_(fromJust(minMoves(quell)),2)
  Move(East)      EncodeTopPos_At_(jpos(jewel(quell)), 0)
  Move(East)      EncodeTopDirs_At_(solution(quell), 3)
   
  GoToEdge(East)  MarkTopCell_(0)
  Move(West)      EncodeTopNum_At_(numPearls(quell),5)
  Move(West)      EncodeTopBool_At_(found(jewel(quell)), 4)  
  Move(West)      PadEmptyCellAs_(0)
}

procedure DrawQBoard_WithSpikesTo_(board, spikesDir) {
  /* PRECOND: * the board has at least one qelem */
  GoToCorner__(South, West)
  foreach row in board {
    DrawQRow_WithSpikesTo_(row, spikesDir)
    Move(North)
  }
}

procedure DrawQBall_To_(ball, mdir) {
   if (not isNothing(ball)) {
     pos := fromJust(ball)
     GoToCell_(pos)
     DrawBall_(mdir)
   }
}

procedure DrawQJewel_(jewel) {
  GoToCell_(jpos(jewel))
  Drop__Times(attrAColor(), 1+hitsReceived(jewel))
  DrawBool_With_(found(jewel), attrBColor())
}

// Level 2

// Top row
procedure MarkTopCell_(i) { Drop__Times(qelemColor(), 100+i) }
procedure EncodeTopBool_At_(b ,i) { MarkTopCell_(i)  DrawBool_With_(b , attrBColor()) }
procedure EncodeTopMDir_At_(md,i) { MarkTopCell_(i)  DrawMDir_With_(md, attrAColor()) }
procedure EncodeTopPos_At_(pos,i) { MarkTopCell_(i)  DrawPos_With_(pos, attrAColor()) }

procedure EncodeTopDirs_At_(dirs, i) {
   code := codeOfDirs_(dirs)
   DrawTopCode_InBase_With_And_As_(code, 100, attrAColor(), attrBColor(), i)
}

procedure EncodeTopMNum_At_(mn, i) { MarkTopCell_(i) DrawMNum_With_(mn, attrAColor()) }
procedure EncodeTopNum_At_(n, i)   {
  MarkTopCell_(i)
  if (n < 100) { DrawNum_With_(n, attrAColor())   } 
   else        { DrawNum_With_(100, attrAColor()) }
}

procedure PadEmptyCellAs_(i) {
   while(not isCellAtTopRow()) {
      MarkTopCell_(i) 
      Move(West)
   }
}

procedure DrawTopCode_InBase_With_And_As_(code, base, colorA, colorB, i) {
  currentColor := colorA
  currentCode  := code
  while (currentCode > 0) {
    currentDigit := currentCode mod base
    currentCode  := currentCode div base
    DrawNum_With_(currentDigit, currentColor)
    if (currentColor == colorA) { MarkTopCell_(i)  currentColor := colorB } 
     else                       { Move(East)       currentColor := colorA }
  }
}

procedure GoToTopRow() {
  GoToCorner__(South, West)
  while (canMove(North) && not atTopRow()) { Move(North) }
}

function atTopRow ()      { return(isCellAtTopRow())               }
function isCellAtTopRow() { return(numStones(qelemColor()) >= 100) }


// Ball
procedure DrawBall_(mdir) {
  DrawMDir_With_(mdir, ballColor())
}

// Board
procedure DrawQRow_WithSpikesTo_(row, spikesDir) {
  /* PRECOND: * the row has at least one element */
  GoToEdge(West)
  DrawQelem_WithSpikesTo_(head(row), spikesDir)
  foreach qelem in tail(row) {
    Move(East)
    DrawQelem_WithSpikesTo_(qelem, spikesDir)  
  }
}

procedure DrawQelem_WithSpikesTo_(qelem, spikesDir) {
  Drop__Times(qelemColor(), codeOfQelem_(qelem))
  switch (qelem) to {
    Box(gender)             -> { DrawGender_With_(gender   , attrAColor()) }
    Limit(corner, pointsTo) -> { DrawCorner_With_(corner   , attrAColor())
                                 DrawMDir_With_  (pointsTo , attrBColor()) }
    Portal(doorA, doorB)    -> { DrawPos_With_   (doorA    , attrAColor())
                                 DrawPos_With_   (doorB    , attrBColor()) }
    Spike(rotable)          -> { DrawMDir_With_  (rotable  , attrAColor()) }
    Switch()                -> { DrawMDir_With_  (spikesDir, attrAColor()) }
    Gate(open)              -> { DrawBool_With_  (open     , attrAColor()) }
    _                       -> { }
    }
}

procedure DrawCorner_With_(corner, color) {
  switch (corner) to {
    Nothing    -> { Drop__Times(color, 9) }
    Just(d1d2) -> { d1 := fst(d1d2)
                    d2 := snd(d1d2)
                    if     (d2==nextDir(d1)) { DrawDir_With_(d1,color)              }
                    elseif (d2==prevDir(d1)) { Drop__Times(color, 4+codeOfDir_(d1)) }
                    else                     { BOOM(msgInvalidQuell())              }
                  }
  }
}

// ---------
// Codes
// ---------
function codeOfQelem_(qelem) {
  return (matching (qelem) select
             0 on Empty
             1 on Pearl
             2 on Wall
             3 on Box
             4 on Limit
             5 on Portal
             6 on Multispike
             7 on Spike
             8 on Switch
             9 on Gate
            10 on Out
            boom(msgNotExpected("QElem")) otherwise
  )
}

// ---------
// Colors
// ---------
function ballColor()  { return(Blue)  }
function qelemColor() { return(Black) }
function attrAColor() { return(Red)   }
function attrBColor() { return(Green) }

// ---------
// Error messages
// ---------
function msgNoQuellLevel() { 
  return(babel("There is no Quell level represented on the board"
              ,"No hay un nivel de Quell representado en el tablero"))
}

function msgNoQElement() { 
  return(babel("There is no QElement represented in the current cell"
              ,"No hay un QElement representado en la celda actual"))
}

function msgInvalidQuell() { 
  return(babel("Quell representation is invalid"
              ,"La representación de Quell es inválida"))
}

/* ============================================================================================================
   END Quell-IO.gbs
   ============================================================================================================
*/
