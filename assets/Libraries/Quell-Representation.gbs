/* ============================================================================================================
   START Quell-Representation.gbs
   Coding colors and explanation of representation for QuellLevels
// REQUIRE: Babel.gbs
// REQUIRE: EnglishPrimitives.gbs
// REQUIRE: Prelude.gbs
// REQUIRE: Quell-Model.gbs
   ============================================================================================================
*/

// ---------
// Representation
// ---------
/*
  QLevel info is represented at top row with 10x qelem stones (x the col Number) 
    * cell  0 at column 0 encode if the level is tutorial
    * cell  1 at column 1 encode numMoves in attrA stones (100 for overload)
    * cell  2 at column 2 encode minMoves in attrA stones (up to 29 -- more are ignored)
    * cell  3 at column 2 from East encode jewelFound in attrB stones
    * cell  4 at column 1 from East encode numPearls  in attrA stones
                                       and rightMoves in attrB stones
    * cell  5 at East edge encode spikesDir in attrA stones

  QElements are represented with qelemColor() stones, and their attributes with attrAColor() and attrBColor() stones, depending of the case.
    + Empty       ,  no qelem stones
    + Corner      ,  1 stone   * dir      , attrA stones (with no dir is a generic Bound -- for edition)
    + Angle       ,  2 stones  * dir      , attrA stones
    + Limit       ,  3 stones  * pointsTo , attrA stones 
    + Portal      ,  4 stones  * target   , attrA stones
                               * id       , attrB stones
    + Gate        ,  5 stones  * clsed    , attrB stones
    + Spike       ,  6 stones  * dir      , attrA stones (with no dir is requesting a dir -- for edition) 
    + Multispike  ,  7 stones
    + Rotablespike,  8 stones  * spikesDir, attrA stones
    + Switch      ,  9 stones  * spikesDir, attrA stones
    + Wall        , 10 stones
    + Out         , 11 stones

  QTokens are represented with attrAColor() and attrBColor(), in such a way as to avoid clashing with each other or the qelems they may appear in
    + Pearl                    *       1 attrB stones 
    + Box                      * gender, 100*attrB stones (must be equal to Pearl representation, and different from attributes at Gates, Portals or Switches)
                                         10+ for beaming boxes
                                         In edition mode, it uses 20 qelem stones to indicated it is waiting for a gender.
    + Jewel                    * hits  , attrA stones (must be different from Pearl representation, because it may also appear on Empty)
  
  The ball is represented with ballColor() stones 
    + moving North                 ,  1 stone
    + moving East                  ,  2 stones
    + moving South                 ,  3 stones
    + moving West                  ,  4 stones
    + not moving                   ,  5 stones
    + not moving with hint to North,  6 stones (5+1)
    + not moving with hint to East ,  7 stones (5+2)
    + not moving with hint to South,  8 stones (5+3)
    + not moving with hint to West ,  9 stones (5+4)
    + beaming while moving North   , 11 stones (10+1)
    + beaming while moving East    , 12 stones (10+2)
    + beaming while moving South   , 13 stones (10+3)
    + beaming while moving West    , 14 stones (10+4)
*/

procedure GoToTopShowHint()  { GoToCorner__(North, West)                       }
procedure GoToTopNumMoves()  { GoToCorner__(North, West); Move(East)           }
procedure GoToTopJewel()     { GoToCorner__(North, East); Move__Times(West, 2) }
procedure GoToTopNumPearls() { GoToCorner__(North, East); Move(West)           }
procedure GoToTopHint()      { GoToCorner__(North, East); Move(West)           }
procedure GoToTopSpikesDir() { GoToCorner__(North, East)                       }

// ---------
// Colors
// ---------
function ballColor()  { return(Blue)  }
function qelemColor() { return(Black) }
function attrAColor() { return(Green) }
function attrBColor() { return(Red)   }

// ---------
// Codes
// ---------
function codeOfQelem_(qelem) {
  return (matching (qelem) select
             0 on Empty
             0 on Pearl        // codeOfPearl()       
             1 on Corner       // codeOfCorner()       
             2 on Angle        // codeOfAngle()       
             3 on Limit        // codeOfLimit()       
             4 on Portal       // codeOfPortal()      
             5 on Gate         // codeOfGate()        
             6 on Spike        // codeOfSpike()       
             7 on Multispike   // codeOfMultispike()  
             8 on RotableSpike // codeOfRotableSpike()
             9 on Switch       // codeOfSwitch()      
            10 on Wall         // codeOfWall()        
            11 on Out          // codeOfOut()           
            boom(msgNotExpected("QElem")) otherwise
  )
}

function codeOfPearl()         { return(  0) }
function codeOfCorner()        { return(  1) }
function codeOfAngle()         { return(  2) }
function codeOfLimit()         { return(  3) }
function codeOfPortal()        { return(  4) }
function codeOfGate()          { return(  5) }
function codeOfSpike()         { return(  6) }
function codeOfMultispike()    { return(  7) }
function codeOfRotableSpike()  { return(  8) }
function codeOfSwitch()        { return(  9) }
function codeOfWall()          { return( 10) }
function codeOfOut()           { return( 11) }

function codeOfIncompleteBox() { return( 20) }  // For edition
function codeOfTopSpikesDir()  { return(106) }
/* ============================================================================================================
   END Quell-Representation.gbs
   ============================================================================================================
*/
