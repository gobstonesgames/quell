/* ============================================================================================================
   START Prelude.gbs
   General useful operations for a number of conveniencies
// REQUIRE: Babel.gbs
   ============================================================================================================
*/

// ---------
// Gobstones auxiliary functions
// ---------
procedure GoToCorner__(dir1, dir2) {
  /* PRECOND:
      * dir1 and dir2 are not equal and not opposite of each other
  */                                            
  GoToEdge(dir1)
  GoToEdge(dir2)
}

procedure Drop__Times(color, num) { repeat (num) { Drop(color) } }
procedure Grab__Times(color, num) { repeat (num) { Grab(color) } }
procedure Move__Times(dir, num)   { repeat (num) { Move(dir)   } }

procedure GrabAll(color) { Grab__Times(color, numStones(color)) }
procedure ClearCell() { foreach color in [minColour()..maxColour()] { GrabAll(color) } }

function isHorizontal(dir) { return (dir==East  || dir==West)  }
function isVertical(dir)   { return (dir==North || dir==South) }

function adjust_To_(val, max)             { return ((val+max) mod max) }
function num_IsBetween_And_(n, low, high) { return(n>=low && n<=high)  }

function delta(b) {
  return (choose 1 when (b)
                 0 otherwise) 
}

// ---------
// Maybe 
// ---------
type Maybe is variant {
  case Nothing  {}
  case Just     { field fromJust }  
}

function isNothing(mv) {
  return(matching (mv) select
           True on Nothing
           False otherwise)
}

function just(elem) {
  return (Just(fromJust <- elem))
}

procedure DrawMNum_With_(mNum, color) {
  Drop__Times(color
            , matching (mNum) select
                1 + fromJust(mNum) on Just
                0                  otherwise
  )
}

function currentMNumWith_(color) {
  return (choose
            Nothing                   when (numStones(color) == 0)
            just(numStones(color)-1)  otherwise)
}

procedure DrawMDir_With_(mdir, color) {
  Drop__Times(color, codeOfMDir_(mdir))
}

function codeOfMDir_(mdir) {
  return (matching (mdir) select codeOfDir_(fromJust(mdir)) on Just
                                 5                          otherwise)
}

function currentMDirWith_(color) {
  /* PRECOND:
       * there is a MDir represented (between 1 to 5 color stones)
  */
  return(choose Nothing                      when (numStones(color)==5)
                just(currentDirWith_(color)) otherwise)
}

// ---------
// Pos
// ---------
type Pos is record {
   field row    // Number
   field col    // Number
}

function pos(r, c) { return(Pos(row <- r, col<-c)) }

procedure GoToCell_(pos) {
  GoToEdge(West)      
  Move__Times(East, col(pos))   
  GoToEdge(South)  
  Move__Times(North, row(pos))    
}

function currentPos() {
  return(Pos(row <- rowIndex()
            ,col <- colIndex()))
}

function rowIndex() { return(distanceToEdge_(South)) }
function colIndex() { return(distanceToEdge_(West))  }

function distanceToEdge_(dir) {
  measured := 0
  while (canMove(dir)) { Move(dir); measured := measured+1 }
  return (measured)
}

function nextPosOf_To_(pos,dir) {
  return (Pos(row <- row(pos) + vOffset(dir)
             ,col <- col(pos) + hOffset(dir)
  ))
}

function vOffset (dir) {
  return (matching (dir) select
            -1 on South
             1 on North
             0 otherwise) 
}

function hOffset (dir) {
  return (matching (dir) select
            -1 on West
             1 on South
             0 otherwise) 
}

procedure DrawPos_With_(vec, color) {
  Drop__Times(color, codeOfPos_(vec))
}

function codeOfPos_(vec) {
  /* PRECOND: * col of vec <= 999 */
  return (row(vec)*1000 + col(vec))
}

function currentPosWith_(color) {
  code := numStones(color)
  return (Pos(row <- code div 1000
             ,col <- code mod 1000
  ))
}

// ---------
// Genders 
// ---------
type Gender is variant {
   case Masculine {}
   case Femenine {}
   // case Both {}
   // case None {}
}

procedure DrawGender_With_(gender, color) {
   Drop__Times(color, codeOfGender_(gender))
}

function codeOfGender_(gender) {
  return (matching (gender) select
            1 on Masculine
            2 on Femenine
            boom(msgNotExpected("Gender")) otherwise)
}

function currentGenderWith_(color) {
  /* PRECOND:
       * there is a gender represented (between 1 to 2 color stones)
  */
  return(decodeGender_(numStones(color)))
}

function decodeGender_(code) {
  /* PRECOND:
       * code is the coding of a Gender (between 1 and 2)
  */
  return(matching (code) select
           Masculine  on 1
           Femenine   on 2
           boom(msgNotACodeFor_("Gender")) otherwise)
}

// ---------
// Board traversal operations 
// ---------
procedure StartBoardTraverseTo_And_(mainDir, secDir) {
  GoToCorner__(opposite(mainDir), opposite(secDir))
}

function atEndOfBoardTraverseTo_And_(mainDir, secDir) {
  return(not canMove(mainDir) && not canMove(secDir))
}

procedure GoToNextCellInBoardTraverseTo_And_(mainDir, secDir) {
  /* PRECOND:
     * head is not at end of a board traverse to mainDir and secDir
  */
  if (canMove(mainDir)) { Move(mainDir) }
  else                  { GoToEdge(opposite(mainDir))
                          Move(secDir)
                        }
}

// ---------
// List functions 
// ---------
function elemAtPos_In_(pos,xss) {
  /* PRECOND:
       * there are at least 1+row(pos) elements in xss
       * there are at least 1+col(pos) elements in elemAtIndex_In_(row(pos),xss)
  */
  row := elemAtIndex_In_(row(pos), xss)
  return(elemAtIndex_In_(col(pos), row))
}

function elemAtIndex_In_(idx,xs) { 
  /* PRECOND: * there are at least 1+idx elements in xs */
  return(list_At_(xs,idx)) 
}

function list_At_(xs, idx) {
  /* PRECOND: * there are at least 1+idx elements in xs */
  currentList := xs
  repeat (idx) { currentList := tail(currentList) }
  return (head(currentList))
}

function column_Of_(col, xss) {
  /* PRECOND:
       * all elements.of xss have at least col+1 elements
  */
  columnSeen := [ ]
  foreach row in xss { columnSeen := columnSeen ++ [ elemAtIndex_In_(col, row) ] }
  return (columnSeen)
}

function set_AtPos_To_(xss, pos, x) {
  row    := list_At_(xss, row(pos))
  newRow := set_AtIndex_To_(row, col(pos), x)
  return(set_AtIndex_To_(xss, row(pos), newRow))
}

function set_AtIndex_To_(xs, i, x) {
  /* PRECOND:
       * xs has at least i+1 elements
  */
  let (prev, oldX, post) := split_At_(xs, i)
  return(prev ++ [x] ++ post)
}

function split_At_(xs, i) {
  /* PRECOND: 
       * xs has at least i+1 elements
  */
  seen := [ ]
  toSee := xs
  repeat (i) { 
     seen := seen ++ head(toSee)
     toSee := tail(toSee)
  }
  return(seen, head(toSee), tail(toSee))
}

function reverse(xs) {
  reversed := []
  foreach x in xs {
    reversed := [x]++reversed
  }
  return(reversed)
}

function replicate__Times(x, n) {
  processed := []
  repeat(n) { processed := [x] ++ processed }
  return (processed)
}

function listFrom_To_(low,high) {
  processed := []
  current := low
  repeat (high - low + 1) {
    processed := [current] ++ processed
    current := current + 1
  }
  return (processed)
}

// ---------
// Coding functions 
// ---------

// Dir
procedure DrawDir_With_(dir, color) { Drop__Times(color, codeOfDir_(dir)) }
function codeOfDir_(dir) {
  return (matching (dir) select
            1 on North
            2 on East
            3 on South
            4 on West
            boom(msgNotExpected("Direction")) otherwise)
}

function currentDirWith_(color) {
  /* PRECOND: * there is a Dir represented (between 1 to 4 color stones) */
  return(decodedDir_(numStones(color)))
}

function decodedDir_(code) {
  /* PRECOND: * code is the coding of a Dir (between 1 and 4) */
  return(matching (code) select
           North on 1
           East  on 2
           South on 3
           West  on 4
           boom(msgNotACodeFor_("Direction")) otherwise)
}

// Bool
procedure DrawBool_With_(b, color) { Drop__Times(color, codeOfBool_(b)) }
function codeOfBool_(b) {
  return (choose 1 when (b)
                 0 otherwise)
}

function currentBoolWith_(color) {
  /* PRECOND: * there is a bool represented in the current cell with the given color */
  return(decodedBool_(numStones(color)))
}

function decodedBool_(code) {
  /* PRECOND: * code is the coding of a Bool (either 0 or 1) */
  return(matching (code) select
           True   on 1
           False  on 0
           boom(msgNotACodeFor_("Bool")) otherwise)
}

// ---------
// Stacks 
// ---------
type Stack is record {
  field data  // [ Elements ]
}

function emptyS()     { return (Stack(data <- [ ]))             }
function isEmptyS(st) { return(not isEmpty(data(st)))           }
function push(x, st)  { return (Stack(data <- [x] ++ data(st))) }
function top(st)      { return (head(data(st)))                 } /* PRECOND: st is not empty */
function pop(st)      { return (Stack(data <- tail(data(st))))  } /* PRECOND: st is not empty */

// ---------
// ERROR MESSAGES
// ---------
function msgNotACodeFor_(element) {
  return(babel("Not a " ++ element ++" code"
              ,"No es un cÃ³digo para " ++ element)) 
}
/* ============================================================================================================
   END Prelude.gbs
   ============================================================================================================
*/
